
* A Nodejs org mode parser module
** "So What?"
This node.js module implements a [[http://orgmode.org/][org-mode]] file format parser.
Org-mode is a cool Emacs package let you structuring information in a nice way, 
and exporting it in html, latex, pdf and so on


** What does it basically do org-mode-parser I either couldn't do before?
I was unable to find a JavaScript parser for org-mode. Now we have one.
Org-mode is so useful you will start writing your data in org-mode instead of text files for everything
needing a bit of structuring.
It is also _XML-free_ and yes, we like it  :)

** what are its key benefits?
A lot of unit testing (over 60) and a pretty fast parser (see below).
Also, it has minimal requirements.


** Usage example:
#<<opening Example>>
# Look  http://orgmode.org/manual/Code-block-specific-header-arguments.html
# for the syntax, anyway org-babel-tangle
# will export this soruce
#+BEGIN_SRC javascript -n -r  :tangle basic-example.js
var orgParser=require('org-mode-parser');
orgParser.makelist("README.org", function (nodelist){
   // Here nodelist is a list of Orgnode objects (ref:putyourcode)
   console.dir(nodelist);
});
#+END_SRC
In the line [[(putyourcode)]] you are free to process the nodes in order.

* API
The main entry point is the makelist function, which accept a filename and a callback function.
makelist() will pass to the function the list of parsed nodes as first parameter, as described in the [[openening Example]]

You can optionally build a query object called OrgQuery to easily select subtree,
searching tags, et cetera:

#+BEGIN_SRC javascript -n -r
orgParser.makelist("./test/treeLevel.org",function(nodes){
	var ofd=new orgParser.OrgQuery(nodes);
	//  ofd is a complex object wiith let you do query and so on
});
#+END_SRC

Supporte methods of OrgQuery are:
 + selectSubtree(node)
   Extract the nodes hierarchically below the given input
 + selectTag(tagString)
 + sortBy
 + reject(function)
 + rejectTag(tagName)
 + toArray()
 + each(functionToPassEach)
 + random()
   Extract a random element

See the unit test section 'basicLibraries OrgQuery-Complex' on test/parseTest.js 
for more usage examples

** Known Defects?
The input must be a well formed org-mode file. 
Parser can detect some corruptions, but it is not provided a specific sanity check.

** Where can I find stable packages?
On npm repository. 
Github's latest checkout is the developement version, to use it at your own risk.

* Design Goals

** API Stability
    In general, every API described in the [[API]] section is here to stay. 
    Compatibility will be retained as much as possible in the future releases.
** Performance
    At the time of writing, the parser is pretty fast. On a Linux virtualized machine, we get about 20.000 nodes per seconds.
    We will keep an eye on performance.
    Please help us to stress the parser and find its true limit.
** Minimize dependency
    Org-mode-parser depends only on two packages, underscore ad vows. Vows dependency is used only 
    for regression tests, so the parser really depends only on underscore.
** Tests are documentation.
    Please look at test/parserTest.js file for usage example.
    Tests are commenteted and pretty self explanatory



* RELEASE NOTES

** ORG_MODE_PARSER_0.0.4 :published:
 1) Added new OrgQuery methods: 
    1. sortBy
    2. reject
    3. toArray
    4. each
 2) :PROPERTIES: without :END: generates an error now.
    The parser is quite weak, but can detect this simple case.
BUGFIXES:
 + OrgQuery had a bug, and collected nodes could not be unique in some rare situations.
   Now we relay on underscore library for generating unique id
 + A set of stronger guards on constructors
    

** ORG_MODE_PARSER_0.0.3   :published:
  1) Added the ability to regenerate the Orgnode as string using the method
     toOrgString()
     Be carefully, the method is still experimental and do not emit:
      a) Comments
      b) SCHEDULE,DEADLINE and CLOCK directive
  2) Added the OrgQuery object, for doing queries like 
     + subtree extraction with .selectSubtree
     + tag-based searches with selectTag   
Even if the OrgQuery try to play nice, it is not yet an array, so
avoid using it directly with _.each(...)


*** KNOWN LIMITATIONS
  1) Comments are stripped off during parsing.
  2) Special directive starting with '#+' are mostly ignored during the parsing, 
     for instance #+AUTHOR etc
  3) Tables are not parsed at all. 
  4) In org-mode tags cannot have "-" character in name. They are split in subwords. 
     The parser allow this instead, so be careful when editing by hand org files.
  5) properties can have "-" but this will force 
     you to access them with the array syntax instead of the dot notation, so we
     strongly suggest to avoid "-" and special java character in property names.
     Relay on "_", for instance.

** ORG_MODE_PARSER_0.0.2 					  :published:
  1) SCHEDULE,DEADLINE and CLOCK directives now are correctly parsed
  2) Added a performance watchdog to track slowdowns
  3) Added the ability to return performance data via makelist
  4) Started restructuring parser for better performance.
  5) Minor API Change: null is the default value for tag,priority,scheduled, deadline 
     when not set.
     e.tags.existingtag is true if existingtag is there.
     Anyway is better to use 
       "existingtag" in e.tags
     which is a better syntax
** ORG_MODE_PARSER_0.0.1					  :published:
First revision

* Release command sequence
At the time of writing, the github repository is the master code repository

1. Check the package.json version
2. Issue the following commands:
#+BEGIN_SRC shell
./bin/testInstall.sh
git commit -m "Delivered tag revision ORG_MODE_PARSER_0.0.4" .
git tag -a -m "Delivered tag revision ORG_MODE_PARSER_0.0.4" ORG_MODE_PARSER_0.0.4
git push --tag
git push
npm publish
#+END_SRC


#Config
#+TITLE:     README.org
#+AUTHOR:    Giovanni Giorgi
#+EMAIL:     jj@gioorgi.com
#+DATE:      2011-10-04 Tue
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
